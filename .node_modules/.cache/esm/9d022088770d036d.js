let Joi,REFRESH_SECRET,User,RefreshToken,CustomErrorHandler,JwtService;_770‍.x([["default",()=>_770‍.o]]);_770‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_770‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);_770‍.w("../../models",[["User",["User"],function(v){User=v}],["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}]]);_770‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_770‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);






const refreshController = {
    async refresh(req,res,next){
        
        //validation logic

        const refreshSchema = Joi.object({
            refresh_token:Joi.string().required()
        
        })

        const {error} = refreshSchema.validate(req.body);
        if(error){
            return next(error);
        }

        //database validatation
        let refreshtoken;
        try{
             refreshtoken =await RefreshToken.findOne({token:req.body.refresh_token});
             _770‍.g.console.log(refreshtoken)
             if(!refreshtoken){
                 return next(CustomErrorHandler.unAuthorized('Invalid Refresh Token'));
             }

             let userId;
             try{
                const {_id} = await JwtService.verify(refreshtoken.token,REFRESH_SECRET);
                userId = _id;
             }catch(err){
                return next(CustomErrorHandler.unAuthorized('Invalid Refresh Token'));
             }

             const user = User.findOne({_id:userId});
             if(!user){
                 return next(CustomErrorHandler.unAuthorized('No user found!'));
             }

             const access_token = JwtService.sign({_id:user._id, role:user.role});

             //refresh token
 
             const refresh_token = JwtService.sign({_id:user._id, role:user.role}, '1y',REFRESH_SECRET);
                 
                     // database whitelist fro refresh token
 
                     await RefreshToken.create({token:refresh_token});
 
             
             res.json({ access_token,refresh_token });





        }catch(err){
            return next(new Error('Something went wrong' + err.message));
        }


    }
}

_770‍.d(refreshController);