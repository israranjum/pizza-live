let Joi,User,RefresToken,CustomErrorHandler,bcrypt,JwtService,REFRESH_SECRET;_67f‍.x([["default",()=>_67f‍.o]]);_67f‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_67f‍.w("../../models",[["User",["User"],function(v){User=v}],["RefresToken",["RefresToken"],function(v){RefresToken=v}]]);_67f‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_67f‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_67f‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_67f‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const loginController = {
    async login(req,res,next){
      
      
      
      
        //validation
        const loginSchema = Joi.object({
            email:Joi.string().email().required(),
            password:Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),

        })

        const {error} = loginSchema.validate(req.body);
        if(error){
            return next(error);
        }
        try{
            const user =await User.findOne({email:req.body.email})
            if(!user){
                return next(CustomErrorHandler.wrongCredentials());
            }
            
            // Compare the password
            const match  = await bcrypt.compare(req.body.password, user.password);
            if(!match){
                return next(CustomErrorHandler.wrongCredentials());
            }

            //Token Genrate

            const access_token = JwtService.sign({_id:user._id, role:user.role});

            //refresh token

            const refresh_token = JwtService.sign({_id:user._id, role:user.role}, '1y',REFRESH_SECRET);
                
                    // database whitelist fro refresh token

                    await RefresToken.create({token:refresh_token});

            
            res.json({ access_token,refresh_token });

        }catch(err){
            return next(err)
        }
    }

}

_67f‍.d(loginController);